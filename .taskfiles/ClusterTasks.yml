---
version: "3"

tasks:
  sync:
    desc: Sync flux-system with the Git Repository
    cmds:
      - flux reconcile source git flux-system
    silent: true

  create:
    desc: Create Flux setup
    cmds:
      - kubectl create namespace flux-system
      - cat ~/.config/sops/age/keys.txt | kubectl --kubeconfig=./kubeconfig -n flux-system create secret generic sops-age --from-file=age.agekey=/dev/stdin
      - kubectl apply -k ./cluster/base/flux-system
      - kubectl apply -k ./cluster/base/flux-system

  taints:
    desc: Apply labels and taints
    cmds:
      - for i in {0..2}; do kubectl label nodes k8s-worker-$i node-role.kubernetes.io/worker=true; done
      - for i in {0..2}; do kubectl taint nodes k8s-master-$i node-role.kubernetes.io/master=:NoSchedule; done

  list-dockerhub:
    desc: What dockerhub images are running in my cluster
    cmds:
      - kubectl get pods --all-namespaces -o=jsonpath="{range .items[*]}{'\n'}{range .spec.containers[*]}{.image}{'\n'}{end}{end}" | sort | uniq | grep -Ev 'quay|gcr|ghcr|ecr|us-docker' | grep -Ev 'bitnami|rook|intel|grafana' |  sed -e 's/docker\.io\///g' | sort | uniq

  list-bad:
    desc: Lists all pods with issues
    cmds:
      - kubectl get pods -A | grep -v Running

  delete-failed-pods:
    desc: Deletes failed pods
    cmds:
      - kubectl delete pods --field-selector status.phase=Failed -A --ignore-not-found=true

  netshoot:
    desc: Create a netshoot container for debugging
    cmds:
      - kubectl run tmp-shell --rm -i --tty --image ghcr.io/nicolaka/netshoot:latest {{.CLI_ARGS}}

  debug-volume:
    desc: Attach a volume to a container for debugging, ex. VOLUME=zigbee2mqtt-config-v1 NAMESPACE=home task debug-volume
    interactive: true
    silent: true
    cmds:
      - |
        kubectl run debug-{{.VOLUME}} -n {{.NAMESPACE}} -i --tty --rm --image=null --overrides='
          {
            "spec": {
              "containers": [
                {
                  "name": "debug",
                  "image": "docker.io/library/alpine:3.15",
                  "command": [
                    "/bin/sh"
                  ],
                  "stdin": true,
                  "stdinOnce": true,
                  "tty": true,
                  "lifecycle": {
                    "postStart": {
                      "exec": {
                        "command": [
                          "/bin/sh",
                          "-c",
                          "apk add --no-cache curl vim"
                        ]
                      }
                    }
                  },
                  "volumeMounts": [
                    {
                      "name": "storage",
                      "mountPath": "/mnt/storage"
                    },
                    {
                      "name": "storage-fast",
                      "mountPath": "/mnt/storage-fast"
                    },
                    {
                      "name": "debug-volume",
                      "mountPath": "/mnt/volume/"
                    }
                  ]
                }
              ],
              "volumes": [
                {
                  "name": "storage",
                  "nfs": {
                    "server": '{{.NAS_ADDRESS}}',
                    "path": '/storage'
                  }
                },
                {
                  "name": "storage-fast",
                  "nfs": {
                    "server": '{{.NAS_ADDRESS}}',
                    "path": '/storage-fast'
                  }
                },
                {
                  "name": "debug-volume",
                  "persistentVolumeClaim": {
                    "claimName": "{{.VOLUME}}"
                  }
                }
              ],
              "restartPolicy": "Never"
            }
          }'

  debug-node:
    desc: Create a privileged container on a node for debugging, ex. NODE=anvil task debug-node
    interactive: true
    cmds:
      - |
        kubectl run debug-{{.NODE}} -i --tty --rm --image="docker.io/library/alpine:3.15" --privileged --overrides='
          {
            "spec": {
              "nodeSelector": {
                "kubernetes.io/hostname": "{{.NODE}}"
              },
              "restartPolicy": "Never"
            }
          }'
